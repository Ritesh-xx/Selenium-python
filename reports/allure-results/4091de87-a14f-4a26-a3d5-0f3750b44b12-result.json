{"name": "Test Interaction with Radio Buttons, Checkboxes, and Dropdowns", "status": "broken", "statusDetails": {"message": "KeyError: 'email'", "trace": "self = <test_form_elements.TestFormElements object at 0x000001770D5E34D0>\n\n    @allure.feature(\"Forms\")\n    @allure.title(\"Test Interaction with Radio Buttons, Checkboxes, and Dropdowns\")\n    @allure.description(\"This test verifies the selection of various form elements on the signup page.\")\n    def test_signup_form_elements(self):\n        # --- Setup ---\n        # Initialize all the page objects you will need for the flow\n        home = HomePage(self.driver)\n        login = LoginPage(self.driver)\n        customer = CustomerPage(self.driver)\n        fake = Faker()\n    \n        # --- Test Steps ---\n        # This is a cleaner, more readable flow that follows POM.\n        # Each page object is responsible for actions on its own page.\n        with allure.step(\"Navigate to signup page and start registration\"):\n            customer.go_to_signup_page()\n            customer.signup_new_customer(fake.name(), fake.email())\n    \n        # Now, interact with the elements on the CustomerPage.\n        # The test calls high-level methods. The details of finding and clicking\n        # are handled inside the CustomerPage object.\n        with allure.step(\"Interact with Radio Button\"):\n            # Assume CustomerPage has a method 'select_title_mr'\n            # that uses self.click(self.TITLE_MR_RADIO)\n            customer.click(customer.TITLE_MR_RADIO)\n            # You would ideally have a method like 'is_title_mr_selected()'\n            # in CustomerPage to verify this.\n    \n        with allure.step(\"Interact with Checkbox\"):\n            customer.click(customer.NEWSLETTER_CHECKBOX)\n            # You would ideally have a method like 'is_newsletter_checked()'\n            # in CustomerPage to verify this.\n    \n        with allure.step(\"Interact with Dropdown\"):\n            # The logic for selecting from a dropdown is best kept in the page object.\n            # Assume CustomerPage has a method 'select_day_of_birth(day)'.\n            customer.select_day_from_dropdown(\"10\")\n            customer.select_month_from_dropdown(\"May\")\n            customer.select_year_from_dropdown(\"2003\")\n    \n        with allure.step(\"address information\"):\n            user_data = {\n                'first_name': fake.first_name(),\n                'last_name': fake.last_name(),\n                'address': fake.address(),\n                'country': \"Canada\",\n                'state': fake.state(),\n                'city': fake.city(),\n                'zipcode': fake.postcode(),\n                'mobile': fake.phone_number(),\n                'password': \"Test@1234\",\n                'dob_day': 10,\n                'dob_month': \"May\",\n                'dob_year': 2003\n            }\n            customer.fill_customer_details(user_data)\n            customer.submit_creation_form()\n>           write_user_to_csv(\"utilities/test_data.csv\", user_data)\n\ntests\\test_form_elements.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfilepath = 'utilities/test_data.csv'\nuser_data = {'address': '35658 Elliott Vista\\nGomezview, NV 09489', 'city': 'Lucasshire', 'country': 'Canada', 'dob_day': 10, ...}\n\n    def write_user_to_csv(filepath, user_data):\n        file_exists = os.path.isfile(filepath)\n        with open(filepath, mode='a', newline='') as csvfile:\n            writer = csv.DictWriter(csvfile, fieldnames=['email', 'password'])\n            if not file_exists:\n                writer.writeheader()\n>           writer.writerow({'email': user_data['email'], 'password': user_data['password']})\n                                      ^^^^^^^^^^^^^^^^^^\nE           KeyError: 'email'\n\nutilities\\test_data_writer.py:12: KeyError"}, "description": "This test verifies the selection of various form elements on the signup page.", "steps": [{"name": "Navigate to signup page and start registration", "status": "passed", "steps": [{"name": "Navigate to the Signup / Login page", "status": "passed", "start": 1761056948409, "stop": 1761056949627}, {"name": "Start new customer signup with name and email", "status": "passed", "parameters": [{"name": "name", "value": "'Nichole Smith'"}, {"name": "email", "value": "'sandovalbeth@example.com'"}], "start": 1761056949628, "stop": 1761056951329}], "start": 1761056948409, "stop": 1761056951329}, {"name": "Interact with Radio Button", "status": "passed", "start": 1761056951329, "stop": 1761056952598}, {"name": "Interact with Checkbox", "status": "passed", "start": 1761056952598, "stop": 1761056953134}, {"name": "Interact with Dropdown", "status": "passed", "steps": [{"name": "Selecting day from Date of Birth dropdown", "status": "passed", "parameters": [{"name": "day", "value": "'10'"}], "start": 1761056953134, "stop": 1761056953844}, {"name": "Selecting month from Date of Birth dropdown", "status": "passed", "parameters": [{"name": "month", "value": "'May'"}], "start": 1761056953844, "stop": 1761056954323}, {"name": "Selecting year from Date of Birth dropdown", "status": "passed", "parameters": [{"name": "year", "value": "'2003'"}], "start": 1761056954323, "stop": 1761056955053}], "start": 1761056953134, "stop": 1761056955053}, {"name": "address information", "status": "broken", "statusDetails": {"message": "KeyError: 'email'\n", "trace": "  File \"C:\\Users\\Ascendion\\Desktop\\Selenium\\automation_project\\tests\\test_form_elements.py\", line 72, in test_signup_form_elements\n    write_user_to_csv(\"utilities/test_data.csv\", user_data)\n    ~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Ascendion\\Desktop\\Selenium\\automation_project\\utilities\\test_data_writer.py\", line 12, in write_user_to_csv\n    writer.writerow({'email': user_data['email'], 'password': user_data['password']})\n                              ~~~~~~~~~^^^^^^^^^\n"}, "steps": [{"name": "Filling out the customer details form", "status": "passed", "parameters": [{"name": "user_data", "value": "{'first_name': 'Brian', 'last_name': 'Vang', 'address': '35658 Elliott Vista\\nGomezview, NV 09489', 'country': 'Canada', 'state': 'Ohio', 'city': 'Lucasshire', 'zipcode': '74140', 'mobile': '927.414.4042x3895', 'password': 'Test@1234', 'dob_day': 10, 'dob_month': 'May', 'dob_year': 2003}"}], "start": 1761056955057, "stop": 1761056963431}, {"name": "Submitting the new account form", "status": "passed", "start": 1761056963432, "stop": 1761056966142}], "start": 1761056955053, "stop": 1761056966143}], "start": 1761056948408, "stop": 1761056966147, "uuid": "374201ce-fefb-4685-9d7b-5cc5fe5f7d45", "historyId": "f234f8408bd9becd729cd4656b08e387", "testCaseId": "f234f8408bd9becd729cd4656b08e387", "fullName": "tests.test_form_elements.TestFormElements#test_signup_form_elements", "labels": [{"name": "epic", "value": "UI Element Interactions"}, {"name": "feature", "value": "Forms"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_form_elements"}, {"name": "subSuite", "value": "TestFormElements"}, {"name": "host", "value": "ASCENDI-JMI54CO"}, {"name": "thread", "value": "12064-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_form_elements"}], "titlePath": ["tests", "test_form_elements.py", "TestFormElements"]}